policy_module(mynt, 1.100.1)

########################################
#
# Declarations
#

type mynt_t;
type mynt_exec_t;
init_daemon_domain(mynt_t, mynt_exec_t)

permissive mynt_t;

type mynt_initrc_exec_t;
init_script_file(mynt_initrc_exec_t)

type mynt_conf_t;
files_type(mynt_conf_t)

type mynt_var_lib_t;
files_type(mynt_var_lib_t)

type mynt_var_run_t;
files_type(mynt_var_run_t)

type mynt_port_t;
corenet_port(mynt_port_t)

########################################
#
# mynt local policy
#
allow mynt_t self:process { fork };

allow mynt_t self:fifo_file rw_fifo_file_perms;
allow mynt_t self:unix_stream_socket create_stream_socket_perms;

manage_dirs_pattern(mynt_t, mynt_conf_t, mynt_conf_t)
manage_files_pattern(mynt_t, mynt_conf_t, mynt_conf_t)

manage_dirs_pattern(mynt_t, mynt_var_lib_t, mynt_var_lib_t)
manage_files_pattern(mynt_t, mynt_var_lib_t, mynt_var_lib_t)
files_var_lib_filetrans(mynt_t, mynt_var_lib_t, { dir file })

manage_dirs_pattern(mynt_t, mynt_var_run_t, mynt_var_run_t)
manage_files_pattern(mynt_t, mynt_var_run_t, mynt_var_run_t)

sysnet_dns_name_resolve(mynt_t)
corenet_all_recvfrom_unlabeled(mynt_t)

allow mynt_t self:tcp_socket create_stream_socket_perms;
corenet_tcp_sendrecv_generic_if(mynt_t)
corenet_tcp_sendrecv_generic_node(mynt_t)
corenet_tcp_sendrecv_all_ports(mynt_t)
corenet_tcp_bind_generic_node(mynt_t)

gen_require(`
    type mynt_port_t;
')
allow mynt_t mynt_port_t:tcp_socket name_bind;

gen_require(`
    type mynt_port_t;
')
allow mynt_t mynt_port_t:tcp_socket name_connect;

domain_use_interactive_fds(mynt_t)

files_read_etc_files(mynt_t)

miscfiles_read_localization(mynt_t)

sysnet_dns_name_resolve(mynt_t)

allow mynt_t mynt_exec_t:file execute_no_trans;
allow mynt_t self:process setsched;
corecmd_exec_ls(mynt_t)
corenet_tcp_connect_http_port(mynt_t)
dev_read_urand(mynt_t)
fs_getattr_xattr_fs(mynt_t)
kernel_read_system_state(mynt_t)
